class Solution {
    public int[] searchRange(int[] nums, int target) {
        int left = 0, right = nums.length - 1;
        while (left <= right) {
            int mid = (left + right) / 2;
            if (nums[mid] < target) {
                left = mid + 1;
            }
            else if (nums[mid] > target) {
                right = mid - 1;
            }
            else {
                int leftLeft = left, leftRight = mid, rightLeft = mid, rightRight = right;
                while (!((left - 1 < 0 || (nums[left - 1] < target)) && nums[left] == target)) {
                    left = (leftLeft + leftRight) / 2;
                    if (nums[left] < target) {
                        leftLeft = left + 1;
                    }
                    else {
                        leftRight = left - 1;
                    }
                }
                while (!((right + 1 > nums.length - 1 || (nums[right + 1]> target))  && nums[right] == target)) {
                    right = (rightLeft + rightRight) / 2;
                    if (nums[right] > target) {
                        rightRight = right - 1;
                    }
                    else {
                        rightLeft = right + 1;
                    }
                }
                return new int[]{left, right};
            }
        }
        return new int[]{-1, -1};
    }
}
